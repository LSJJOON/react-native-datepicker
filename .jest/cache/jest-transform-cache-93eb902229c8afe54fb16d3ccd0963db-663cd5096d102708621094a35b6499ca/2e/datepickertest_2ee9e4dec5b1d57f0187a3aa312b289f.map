{"version":3,"sources":["/Users/seungjoonlee/Projects/react-native-datepicker/src/__tests__/datepicker.test.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAMA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAIA,IAAA,QAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAEA,QAAQ,CAAC,YAAD,EAAe,YAAK;AAE3B,EAAA,EAAE,CAAE,mBAAF,EAAuB,YAAK;AAC7B,QAAM,IAAI,GAAG,QAAQ,CAAC,MAAT,CAAgB,oBAAC,YAAD,CAAC,OAAD;AAAY,MAAA,YAAY,EAAE;AAAA,eAAO,EAAP;AAAA;AAA1B,MAAhB,EAAqE,MAArE,EAAb;AACC,IAAA,MAAM,CAAC,IAAD,CAAN,CAAa,eAAb;AACD,GAHC,CAAF;AAkUA,CApUO,CAAR","sourcesContent":["import React, { Component } from 'react';\n// import React, { Component } from 'react';\n// import {Platform, Animated, DatePickerAndroid, Modal, View} from 'react-native';\n// import Enzyme, {shallow} from 'enzyme';\n// import Adapter from 'enzyme-adapter-react-16';\n// import Moment from 'moment';\nimport DatePicker from '../datepicker';\n\n// Enzyme.configure({adapter: new Adapter()});\n\nimport * as renderer from 'react-test-renderer';\n\ndescribe('DatePicker', () => {\n\n\tit ('renders correctly', () => {\n\t\tconst tree = renderer.create(<DatePicker onDateChange={() => ({})}></DatePicker>).toJSON();\n  \texpect(tree).toMatchSnapshot();\n\t});\n\n\t// it('initialize', () => {\n\t// \tconst wrapper = shallow(<DatePicker />);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \texpect(datePicker.props.mode).toEqual('date');\n\t// \texpect(datePicker.props.duration).toEqual(300);\n\t// \texpect(datePicker.props.height).toBeGreaterThan(200);\n\t// \texpect(datePicker.props.confirmBtnText).toEqual('确定');\n\t// \texpect(datePicker.props.cancelBtnText).toEqual('取消');\n\t// \texpect(datePicker.props.customStyles).toMatchObject({});\n\t// \texpect(datePicker.props.showIcon).toEqual(true);\n\t// \texpect(datePicker.props.disabled).toEqual(false);\n\n\t// \texpect(wrapper.state('date')).toBeInstanceOf(Date);\n\t// \texpect(wrapper.state('modalVisible')).toEqual(false);\n\t// \texpect(wrapper.state('animatedHeight')).toBeInstanceOf(Animated.Value);\n\t// \texpect(datePicker._renderIcon()).toBeTruthy();\n\n\t// \tconst wrapper1 = shallow(\n\t// \t\t<DatePicker\n\t// \t\t\tdate=\"2016-05-11\"\n\t// \t\t\tformat=\"YYYY/MM/DD\"\n\t// \t\t\tmode=\"datetime\"\n\t// \t\t\tduration={400}\n\t// \t\t\tconfirmBtnText=\"Confirm\"\n\t// \t\t\tcancelBtnText=\"Cancel\"\n\t// \t\t\ticonSource={{}}\n\t// \t\t\tcustomStyles={{testStyle: 123}}\n\t// \t\t\tdisabled={true}\n\t// \t\t\tshowIcon={false}\n\t// \t\t/>\n\t// \t);\n\t// \tconst datePicker1 = wrapper1.instance();\n\n\t// \texpect(datePicker1.props.mode).toEqual('datetime');\n\t// \texpect(datePicker1.props.format).toEqual('YYYY/MM/DD');\n\t// \texpect(datePicker1.props.duration).toEqual(400);\n\t// \texpect(datePicker1.props.confirmBtnText).toEqual('Confirm');\n\t// \texpect(datePicker1.props.cancelBtnText).toEqual('Cancel');\n\t// \texpect(datePicker1.props.iconSource).toMatchObject({});\n\t// \texpect(datePicker1.props.customStyles).toMatchObject({testStyle: 123});\n\t// \texpect(datePicker1.props.showIcon).toEqual(false);\n\t// \texpect(datePicker1.props.disabled).toEqual(true);\n\n\t// \texpect(wrapper1.state('date')).toMatchObject(Moment('2016-05-11', 'YYYY-MM-DD').toDate());\n\t// \texpect(datePicker1._renderIcon()).toEqual(null);\n\n\t// \t// find not work with mount, and defaultProps not work with shallow...\n\t// \tconst iconComponent = shallow(<View>iconComponent</View>);\n\t// \tconst wrapper2 = shallow(<DatePicker date={new Date('2016/09/09')} iconComponent={iconComponent}/>);\n\t// \tconst datePicker2 = wrapper2.instance();\n\t// \texpect(wrapper2.instance().getDateStr()).toEqual('2016-09-09');\n\t// \texpect(datePicker2._renderIcon()).toEqual(iconComponent);\n\n\t// \tconst wrapper3 = shallow(<DatePicker showIcon={false} date={{test: 123}} />);\n\t// \texpect(wrapper3.find('Image').length).toEqual(0);\n\t// \texpect(wrapper3.instance().getDateStr()).toEqual('Invalid date');\n\t// \texpect(datePicker1._renderIcon()).toEqual(null);\n\n\t// });\n\n\t// it('default selected Date', () => {\n\t// \tvar dateStr = null;\n\t// \tconst wrapper = shallow(<DatePicker date=\"\" onDateChange={(date) => {\n\t// \t\tdateStr = date;\n\t// \t}}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onPressConfirm();\n\n\t// \texpect(dateStr).toEqual(Moment().format('YYYY-MM-DD'));\n\t// });\n\n\t// it('default selected Date with minDate and maxDate', () => {\n\t// \tvar dateStr = null;\n\t// \tvar dateStrMax = null;\n\t// \tvar dateStrNormal = null;\n\n\t// \tconst wrapper = shallow(<DatePicker date=\"\" minDate=\"3000-09-09\" onDateChange={(date) => {\n\t// \t\tdateStr = date;\n\t// \t}}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onPressConfirm();\n\n\t// \texpect(dateStr).toEqual('3000-09-09');\n\n\t// \tconst wrapperMax = shallow(<DatePicker date=\"\" maxDate=\"2016-07-07\" onDateChange={(date) => {\n\t// \t\tdateStrMax = date;\n\t// \t}}/>);\n\t// \tconst datePickerMax = wrapperMax.instance();\n\n\t// \tdatePickerMax.onPressConfirm();\n\n\t// \texpect(dateStrMax).toEqual('2016-07-07');\n\n\t// \tconst wrapperNormal = shallow(\n\t// \t\t<DatePicker date=\"\" minDate=\"2016-07-07\" maxDate=\"3000-09-09\" onDateChange={(date) => {dateStrNormal = date;}}/>\n\t// \t);\n\t// \tconst datePickerNormal = wrapperNormal.instance();\n\n\t// \tdatePickerNormal.onPressConfirm();\n\n\t// \texpect(dateStrNormal).toEqual(Moment().format('YYYY-MM-DD'));\n\t// });\n\n\t// it('setModalVisible', () => {\n\t// \tconst wrapper = shallow(<DatePicker />);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.setModalVisible(true);\n\n\t// \texpect(wrapper.state('modalVisible')).toEqual(true);\n\t// \texpect(wrapper.state('animatedHeight')._animation._toValue).toEqual(0);\n\n\t// \tdatePicker.setModalVisible(false);\n\t// \texpect(wrapper.state('animatedHeight')._animation._toValue).toBeGreaterThan(200);\n\t// });\n\n\t// it('onPressCancel', () => {\n\t// \tconst setModalVisible = jest.fn();\n\t// \tconst onCloseModal = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onCloseModal={onCloseModal}/>);\n\t// \tconst datePicker = wrapper.instance();\n\t// \tdatePicker.setModalVisible = setModalVisible;\n\n\t// \tdatePicker.onPressCancel();\n\n\t// \texpect(setModalVisible).toHaveBeenCalledWith(false);\n\t// \texpect(onCloseModal).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('onPressMask', () => {\n\t// \tconst onPressMask = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onPressMask={onPressMask}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onPressMask();\n\n\t// \texpect(onPressMask).toHaveBeenCalledTimes(1);\n\n\t// \t// call onPressCancel when without onPressMask cb func\n\t// \tconst onPressCancel = jest.fn();\n\t// \tconst wrapper1 = shallow(<DatePicker />);\n\t// \tconst datePicker1 = wrapper1.instance();\n\t// \tdatePicker1.onPressCancel = onPressCancel;\n\n\t// \tdatePicker1.onPressMask();\n\n\t// \texpect(onPressCancel).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('onPressConfirm', () => {\n\t// \tconst setModalVisible = jest.fn();\n\t// \tconst datePicked = jest.fn();\n\t// \tconst onCloseModal = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onCloseModal={onCloseModal}/>);\n\t// \tconst datePicker = wrapper.instance();\n\t// \tdatePicker.setModalVisible = setModalVisible;\n\t// \tdatePicker.datePicked = datePicked;\n\n\t// \tdatePicker.onPressConfirm();\n\n\t// \texpect(setModalVisible).toHaveBeenCalledWith(false);\n\t// \texpect(datePicked).toHaveBeenCalledTimes(1);\n\t// \texpect(onCloseModal).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('getDate', () => {\n\t// \tconst wrapper = shallow(<DatePicker date=\"2016-06-04\"/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \texpect(datePicker.getDate()).toMatchObject(Moment('2016-06-04', 'YYYY-MM-DD').toDate());\n\t// \texpect(datePicker.getDate('2016-06-06')).toMatchObject(Moment('2016-06-06', 'YYYY-MM-DD').toDate());\n\n\t// \tconst date = new Date();\n\t// \texpect(datePicker.getDate(date)).toEqual(date);\n\t// });\n\n\t// it('getDateStr', () => {\n\t// \tconst wrapper = shallow(<DatePicker date=\"2016-06-01\"/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \texpect(datePicker.getDateStr()).toEqual('2016-06-01');\n\t// \texpect(datePicker.getDateStr(new Date('2016-06-02'))).toEqual('2016-06-02');\n\t// \texpect(datePicker.getDateStr('2016-06-03')).toEqual('2016-06-03');\n\n\t// \twrapper.setProps({format: 'YYYY/MM/DD'});\n\t// \texpect(datePicker.getDateStr(new Date('2016-06-02'))).toEqual('2016/06/02');\n\t// });\n\n\t// it('datePicked', () => {\n\t// \tconst onDateChange = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onDateChange={onDateChange}/>);\n\t// \tconst datePicker = wrapper.instance();\n\t// \tconst date = new Date('2016-06-06');\n\t// \twrapper.setState({date});\n\n\t// \tdatePicker.datePicked();\n\n\t// \texpect(onDateChange).toHaveBeenCalledWith('2016-06-06', date);\n\t// });\n\n\t// it('onDatePicked', () => {\n\t// \tconst onDateChange = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onDateChange={onDateChange}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onDatePicked({action: DatePickerAndroid.dismissedAction, year: 2016, month: 5, day: 12});\n\t// \tdatePicker.onDatePicked({action: '', year: 2016, month: 5, day: 12});\n\n\t// \texpect(wrapper.state('date')).toMatchObject(new Date(2016, 5, 12));\n\t// \texpect(onDateChange).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('onTimePicked', () => {\n\t// \tconst onDateChange = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onDateChange={onDateChange}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onTimePicked({action: DatePickerAndroid.dismissedAction, hour: 12, minute: 10});\n\t// \tdatePicker.onTimePicked({action: '', hour: 12, minute: 10});\n\n\t// \texpect(wrapper.state('date').getHours()).toEqual(12);\n\t// \texpect(wrapper.state('date').getMinutes()).toEqual(10);\n\t// \texpect(onDateChange).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('onDatetimeTimePicked', () => {\n\t// \tconst onDateChange = jest.fn();\n\t// \tconst wrapper = shallow(<DatePicker onDateChange={onDateChange}/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onDatetimePicked({action: DatePickerAndroid.dismissedAction, year: 2016, month: 12, day: 12});\n\t// \tdatePicker.onDatetimePicked({action: '', year: 2016, month: 12, day: 12});\n\t// \tdatePicker.onDatetimeTimePicked(2016, 6, 1, {action: DatePickerAndroid.dismissedAction, hour: 12, minute: 10});\n\t// \tdatePicker.onDatetimeTimePicked(2016, 6, 1, {action: '', hour: 12, minute: 10});\n\n\t// \texpect(wrapper.state('date').getFullYear()).toEqual(2016);\n\t// \texpect(wrapper.state('date').getMonth()).toEqual(6);\n\t// \texpect(wrapper.state('date').getDate()).toEqual(1);\n\t// \texpect(wrapper.state('date').getHours()).toEqual(12);\n\t// \texpect(wrapper.state('date').getMinutes()).toEqual(10);\n\t// \texpect(onDateChange).toHaveBeenCalledTimes(1);\n\t// });\n\n\t// it('onPressDate', () => {\n\t// \tPlatform.OS = 'ios';\n\t// \tconst setModalVisible = jest.fn();\n\t// \tconst onOpenModal = jest.fn();\n\t// \tconst wrapper = shallow(\n\t// \t\t<DatePicker date=\"2016-05-06\" minDate=\"2016-04-01\" maxDate=\"2016-06-01\" onOpenModal={onOpenModal}/>\n\t// \t);\n\t// \tconst datePicker = wrapper.instance();\n\t// \tdatePicker.setModalVisible = setModalVisible;\n\n\t// \twrapper.setProps({disabled: true});\n\t// \tdatePicker.onPressDate();\n\n\t// \texpect(setModalVisible).toHaveBeenCalledTimes(0);\n\n\t// \twrapper.setProps({disabled: false});\n\t// \tdatePicker.onPressDate();\n\t// \texpect(wrapper.state('date')).toMatchObject(datePicker.getDate());\n\t// \texpect(setModalVisible).toHaveBeenCalledTimes(1);\n\t// \texpect(onOpenModal).toHaveBeenCalledTimes(1);\n\n\t// \tPlatform.OS = 'android';\n\t// \texpect(datePicker.onPressDate).not.toThrow(Error);\n\n\t// \twrapper.setProps({mode: 'datetime'});\n\t// \texpect(datePicker.onPressDate).not.toThrow(Error);\n\n\t// \twrapper.setProps({mode: 'time'});\n\t// \texpect(datePicker.onPressDate).not.toThrow(Error);\n\n\t// \twrapper.setProps({mode: 'tttt'});\n\t// \texpect(datePicker.onPressDate).toThrow(Error);\n\t// });\n\n\t// it('panResponder', () => {\n\t// \tPlatform.OS = 'ios';\n\t// \tconst wrapper = shallow(<DatePicker date=\"2016-05-06\" minDate=\"2016-04-01\" maxDate=\"2016-06-01\"/>);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \tdatePicker.onPressDate();\n\n\t// \texpect(datePicker.onStartShouldSetResponder()).toEqual(true);\n\t// \texpect(datePicker.onMoveShouldSetResponder()).toEqual(true);\n\n\t// \texpect(datePicker.props.modalOnResponderTerminationRequest()).toEqual(true);\n\t// });\n\n\t// it('getTitleElement - with placeholder', () => {\n\t// \tconst placeholder = 'Please pick a date';\n\t// \tconst wrapper = shallow(<DatePicker placeholder={placeholder} />);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \texpect(datePicker.getTitleElement().props.children).toEqual(placeholder);\n\t// });\n\n\t// it('getTitleElement - without placeholder', () => {\n\t// \tconst wrapper = shallow(<DatePicker date=\"2016-06-04\" />);\n\t// \tconst datePicker = wrapper.instance();\n\n\t// \texpect(datePicker.getTitleElement().props.children).toEqual(datePicker.getDateStr());\n\t// });\n\n\t// it('`date` prop changes', () => {\n\t// \tconst wrapper = shallow(<DatePicker date=\"2016-06-04\" />);\n\n\t// \texpect(wrapper.state('date')).toMatchObject(new Date(2016, 5, 4));\n\n\t// \twrapper.setProps({date: '2016-06-05'});\n\n\t// \texpect(wrapper.state('date')).toMatchObject(new Date(2016, 5, 5));\n\t// });\n});\n\n// describe('Coverage', () => {\n\n// \tit('Event: onRequestClose', () => {\n// \t\tPlatform.OS = 'ios';\n// \t\tconst setModalVisible = jest.fn();\n// \t\tconst wrapper = shallow(<DatePicker />);\n// \t\tconst datePicker = wrapper.instance();\n// \t\tdatePicker.setModalVisible = setModalVisible;\n\n// \t\twrapper.find(Modal).simulate('requestClose');\n\n// \t\texpect(setModalVisible).toHaveBeenCalledTimes(1);\n// \t});\n\n// \tit('Event: onDateChange', () => {\n// \t\tPlatform.OS = 'ios';\n// \t\tconst wrapper = shallow(<DatePicker />);\n\n// \t\twrapper.find('DatePickerIOS').simulate('dateChange');\n// \t});\n// });\n"]}