6d3187f20a2c5584911d132693878f28
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var react_1 = require("react");

var react_native_1 = require("react-native");

var style_1 = require("./style");

var moment_1 = require("moment");

var Mode;

(function (Mode) {
  Mode["date"] = "date";
  Mode["datetime"] = "datetime";
  Mode["time"] = "time";
})(Mode = exports.Mode || (exports.Mode = {}));

var AndroidDatetimeMode;

(function (AndroidDatetimeMode) {
  AndroidDatetimeMode["default"] = "default";
  AndroidDatetimeMode["calendar"] = "calendar";
  AndroidDatetimeMode["spinner"] = "spinner";
})(AndroidDatetimeMode = exports.AndroidDatetimeMode || (exports.AndroidDatetimeMode = {}));

var AndroidTimeMode;

(function (AndroidTimeMode) {
  AndroidTimeMode["default"] = "default";
  AndroidTimeMode["clock"] = "clock";
  AndroidTimeMode["spinner"] = "spinner";
})(AndroidTimeMode = exports.AndroidTimeMode || (exports.AndroidTimeMode = {}));

var Format;

(function (Format) {
  Format["date"] = "YYYY-MM-DD";
  Format["datetime"] = "YYYY-MM-DD HH:mm";
  Format["time"] = "HH:mm";
})(Format = exports.Format || (exports.Format = {}));

var SUPPORTED_ORIENTATIONS = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];

var DatePicker = function (_react_1$Component) {
  (0, _inherits2.default)(DatePicker, _react_1$Component);

  function DatePicker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DatePicker);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DatePicker).call(this, props));
    _this.state = {
      date: _this.getDate(),
      modalVisible: false,
      animatedHeight: new react_native_1.Animated.Value(props.height),
      opacity: new react_native_1.Animated.Value(0),
      allowPointerEvents: true
    };
    _this.getDate = _this.getDate.bind((0, _assertThisInitialized2.default)(_this));
    _this.getDateStr = _this.getDateStr.bind((0, _assertThisInitialized2.default)(_this));
    _this.datePicked = _this.datePicked.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPressDate = _this.onPressDate.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPressCancel = _this.onPressCancel.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPressConfirm = _this.onPressConfirm.bind((0, _assertThisInitialized2.default)(_this));
    _this.onDateChange = _this.onDateChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPressMask = _this.onPressMask.bind((0, _assertThisInitialized2.default)(_this));
    _this.onDatePicked = _this.onDatePicked.bind((0, _assertThisInitialized2.default)(_this));
    _this.onTimePicked = _this.onTimePicked.bind((0, _assertThisInitialized2.default)(_this));
    _this.onDatetimePicked = _this.onDatetimePicked.bind((0, _assertThisInitialized2.default)(_this));
    _this.onDatetimeTimePicked = _this.onDatetimeTimePicked.bind((0, _assertThisInitialized2.default)(_this));
    _this.setModalVisible = _this.setModalVisible.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(DatePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          style = _this$props.style,
          customStyles = _this$props.customStyles,
          disabled = _this$props.disabled,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate,
          minuteInterval = _this$props.minuteInterval,
          timeZoneOffsetInMinutes = _this$props.timeZoneOffsetInMinutes,
          cancelBtnText = _this$props.cancelBtnText,
          confirmBtnText = _this$props.confirmBtnText,
          TouchableComponent = _this$props.TouchableComponent,
          allowFontScaling = _this$props.allowFontScaling,
          locale = _this$props.locale,
          height = _this$props.height;
      var dateInputStyle = [style_1.default.dateInput, customStyles.dateInput, disabled && style_1.default.disabled, disabled && customStyles.disabled];
      return React.createElement(TouchableComponent, {
        style: [style_1.default.dateTouch, style],
        underlayColor: 'transparent',
        onPress: this.onPressDate
      }, React.createElement(react_native_1.View, {
        style: [style_1.default.dateTouchBody, customStyles.dateTouchBody]
      }, !this.props.hideText ? React.createElement(react_native_1.View, {
        style: dateInputStyle
      }, this.getTitleElement()) : React.createElement(react_native_1.View, null), this._renderIcon(), react_native_1.Platform.OS === 'ios' && React.createElement(react_native_1.Modal, {
        transparent: true,
        animationType: "none",
        visible: this.state.modalVisible,
        supportedOrientations: SUPPORTED_ORIENTATIONS,
        onRequestClose: function onRequestClose() {
          _this2.setModalVisible(false);
        }
      }, React.createElement(react_native_1.View, {
        style: {
          flex: 1
        }
      }, React.createElement(react_native_1.Animated.View, {
        style: {
          flex: 1,
          opacity: this.state.opacity
        }
      }, React.createElement(TouchableComponent, {
        style: style_1.default.datePickerMask,
        activeOpacity: 1,
        underlayColor: '#00000077',
        onPress: this.onPressMask
      }, React.createElement(TouchableComponent, {
        underlayColor: '#fff',
        style: {
          flex: 1
        }
      }, React.createElement(react_native_1.Animated.View, {
        style: [style_1.default.datePickerCon, {
          height: height,
          transform: [{
            translateY: this.state.animatedHeight
          }]
        }, customStyles.datePickerCon]
      }, React.createElement(react_native_1.View, {
        pointerEvents: this.state.allowPointerEvents ? 'auto' : 'none'
      }, React.createElement(react_native_1.DatePickerIOS, {
        date: this.state.date,
        mode: mode,
        minimumDate: minDate ? this.getDate(minDate) : undefined,
        maximumDate: maxDate ? this.getDate(maxDate) : undefined,
        onDateChange: this.onDateChange,
        minuteInterval: minuteInterval,
        timeZoneOffsetInMinutes: timeZoneOffsetInMinutes ? timeZoneOffsetInMinutes : undefined,
        style: [style_1.default.datePicker, customStyles.datePicker],
        locale: locale
      })), React.createElement(TouchableComponent, {
        underlayColor: 'transparent',
        onPress: this.onPressCancel,
        style: [style_1.default.btnText, style_1.default.btnCancel, customStyles.btnCancel]
      }, React.createElement(react_native_1.Text, {
        allowFontScaling: allowFontScaling,
        style: [style_1.default.btnTextText, style_1.default.btnTextCancel, customStyles.btnTextCancel]
      }, cancelBtnText)), React.createElement(TouchableComponent, {
        underlayColor: 'transparent',
        onPress: this.onPressConfirm,
        style: [style_1.default.btnText, style_1.default.btnConfirm, customStyles.btnConfirm]
      }, React.createElement(react_native_1.Text, {
        allowFontScaling: allowFontScaling,
        style: [style_1.default.btnTextText, customStyles.btnTextConfirm]
      }, confirmBtnText))))))))));
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.date !== this.props.date) {
        this.setState({
          date: this.getDate(nextProps.date)
        });
      }
    }
  }, {
    key: "setModalVisible",
    value: function setModalVisible(visible) {
      var _this3 = this;

      var _this$props2 = this.props,
          height = _this$props2.height,
          duration = _this$props2.duration;

      if (visible) {
        this.setState({
          modalVisible: visible
        });
        react_native_1.Animated.parallel([react_native_1.Animated.timing(this.state.animatedHeight, {
          toValue: 0,
          duration: duration
        }), react_native_1.Animated.timing(this.state.opacity, {
          toValue: 1,
          duration: duration
        })]).start();
      } else {
        react_native_1.Animated.parallel([react_native_1.Animated.timing(this.state.animatedHeight, {
          toValue: height,
          duration: duration
        }), react_native_1.Animated.timing(this.state.opacity, {
          toValue: 0,
          duration: duration
        })]).start(function () {
          _this3.setState({
            modalVisible: visible
          });
        });
      }
    }
  }, {
    key: "onPressMask",
    value: function onPressMask() {
      if (typeof this.props.onPressMask === 'function') {
        this.props.onPressMask();
      } else {
        this.onPressCancel();
      }
    }
  }, {
    key: "onPressCancel",
    value: function onPressCancel() {
      this.setModalVisible(false);

      if (typeof this.props.onCloseModal === 'function') {
        this.props.onCloseModal();
      }
    }
  }, {
    key: "onPressConfirm",
    value: function onPressConfirm() {
      this.datePicked();
      this.setModalVisible(false);

      if (typeof this.props.onCloseModal === 'function') {
        this.props.onCloseModal();
      }
    }
  }, {
    key: "getDate",
    value: function getDate() {
      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.date;
      var _this$props3 = this.props,
          mode = _this$props3.mode,
          minDate = _this$props3.minDate,
          maxDate = _this$props3.maxDate,
          _this$props3$format = _this$props3.format,
          format = _this$props3$format === void 0 ? Format[mode] : _this$props3$format;

      if (!date) {
        var now = new Date();

        if (minDate) {
          var minDateInstance = this.getDate(minDate);

          if (now < minDateInstance) {
            return minDateInstance;
          }
        }

        if (maxDate) {
          var maxDateInstance = this.getDate(maxDate);

          if (now > maxDateInstance) {
            return maxDateInstance;
          }
        }

        return now;
      }

      if (date instanceof Date) {
        return date;
      }

      return moment_1.default(date, format).toDate();
    }
  }, {
    key: "getDateStr",
    value: function getDateStr() {
      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.date;
      var _this$props4 = this.props,
          mode = _this$props4.mode,
          _this$props4$format = _this$props4.format,
          format = _this$props4$format === void 0 ? Format[mode] : _this$props4$format;
      var dateInstance = date instanceof Date ? date : this.getDate(date);

      if (typeof this.props.getDateStr === 'function') {
        return this.props.getDateStr(dateInstance);
      }

      return moment_1.default(dateInstance).format(format);
    }
  }, {
    key: "datePicked",
    value: function datePicked() {
      if (typeof this.props.onDateChange === 'function') {
        this.props.onDateChange(this.getDateStr(this.state.date), this.state.date);
      }
    }
  }, {
    key: "getTitleElement",
    value: function getTitleElement() {
      var _this$props5 = this.props,
          date = _this$props5.date,
          placeholder = _this$props5.placeholder,
          customStyles = _this$props5.customStyles,
          allowFontScaling = _this$props5.allowFontScaling;

      if (!date && placeholder) {
        return React.createElement(react_native_1.Text, {
          allowFontScaling: allowFontScaling,
          style: [style_1.default.placeholderText, customStyles.placeholderText]
        }, placeholder);
      }

      return React.createElement(react_native_1.Text, {
        allowFontScaling: allowFontScaling,
        style: [style_1.default.dateText, customStyles.dateText]
      }, this.getDateStr());
    }
  }, {
    key: "onDateChange",
    value: function onDateChange(date) {
      var _this4 = this;

      this.setState({
        allowPointerEvents: false,
        date: date
      });
      var timeoutId = setTimeout(function () {
        _this4.setState({
          allowPointerEvents: true
        });

        clearTimeout(timeoutId);
      }, 200);
    }
  }, {
    key: "onDatePicked",
    value: function onDatePicked(_ref) {
      var action = _ref.action,
          year = _ref.year,
          month = _ref.month,
          day = _ref.day;

      if (action !== react_native_1.DatePickerAndroid.dismissedAction && year && month && day) {
        this.setState({
          date: new Date(year, month, day)
        });
        this.datePicked();
      } else {
        this.onPressCancel();
      }
    }
  }, {
    key: "onTimePicked",
    value: function onTimePicked(_ref2) {
      var action = _ref2.action,
          hour = _ref2.hour,
          minute = _ref2.minute;

      if (action !== react_native_1.DatePickerAndroid.dismissedAction && hour && minute) {
        this.setState({
          date: moment_1.default().hour(hour).minute(minute).toDate()
        });
        this.datePicked();
      } else {
        this.onPressCancel();
      }
    }
  }, {
    key: "onDatetimePicked",
    value: function onDatetimePicked(_ref3) {
      var action, year, month, day, _this$props6, mode, androidTimeMode, _this$props6$format, format, _this$props6$is24Hour, is24Hour, timeMoment, timePickerResult, args;

      return _regenerator.default.async(function onDatetimePicked$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              action = _ref3.action, year = _ref3.year, month = _ref3.month, day = _ref3.day;
              _this$props6 = this.props, mode = _this$props6.mode, androidTimeMode = _this$props6.androidTimeMode, _this$props6$format = _this$props6.format, format = _this$props6$format === void 0 ? Format[mode] : _this$props6$format, _this$props6$is24Hour = _this$props6.is24Hour, is24Hour = _this$props6$is24Hour === void 0 ? !format.match(/h|a/) : _this$props6$is24Hour;

              if (!(action !== react_native_1.DatePickerAndroid.dismissedAction)) {
                _context.next = 10;
                break;
              }

              timeMoment = moment_1.default(this.state.date);
              _context.next = 6;
              return _regenerator.default.awrap(react_native_1.TimePickerAndroid.open({
                hour: timeMoment.hour(),
                minute: timeMoment.minutes(),
                is24Hour: is24Hour,
                mode: androidTimeMode
              }));

            case 6:
              timePickerResult = _context.sent;

              if (year && month && day) {
                args = {
                  year: year,
                  month: month,
                  day: day,
                  timePickerResult: timePickerResult
                };
                this.onDatetimeTimePicked.call(this, args);
              }

              _context.next = 11;
              break;

            case 10:
              this.onPressCancel();

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "onDatetimeTimePicked",
    value: function onDatetimeTimePicked(args) {
      var year = args.year,
          month = args.month,
          day = args.day,
          timePickerResult = args.timePickerResult;
      var action = timePickerResult.action,
          hour = timePickerResult.hour,
          minute = timePickerResult.minute;

      if (action !== react_native_1.DatePickerAndroid.dismissedAction) {
        this.setState({
          date: new Date(year, month, day, hour, minute)
        });
        this.datePicked();
      } else {
        this.onPressCancel();
      }
    }
  }, {
    key: "onPressDate",
    value: function onPressDate() {
      var _this$props7, mode, androidDatetimeMode, androidTimeMode, _this$props7$format, format, minDate, maxDate, _this$props7$is24Hour, is24Hour, result, timeMoment, _result, _result2;

      return _regenerator.default.async(function onPressDate$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.props.disabled) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              react_native_1.Keyboard.dismiss();
              this.setState({
                date: this.getDate()
              });

              if (!(react_native_1.Platform.OS === 'ios')) {
                _context2.next = 8;
                break;
              }

              this.setModalVisible(true);
              _context2.next = 29;
              break;

            case 8:
              _this$props7 = this.props, mode = _this$props7.mode, androidDatetimeMode = _this$props7.androidDatetimeMode, androidTimeMode = _this$props7.androidTimeMode, _this$props7$format = _this$props7.format, format = _this$props7$format === void 0 ? Format[mode] : _this$props7$format, minDate = _this$props7.minDate, maxDate = _this$props7.maxDate, _this$props7$is24Hour = _this$props7.is24Hour, is24Hour = _this$props7$is24Hour === void 0 ? !format.match(/h|a/) : _this$props7$is24Hour;

              if (!(mode === 'date')) {
                _context2.next = 16;
                break;
              }

              _context2.next = 12;
              return _regenerator.default.awrap(react_native_1.DatePickerAndroid.open({
                date: this.state.date,
                minDate: minDate ? this.getDate(minDate) : undefined,
                maxDate: maxDate ? this.getDate(maxDate) : undefined,
                mode: androidDatetimeMode
              }));

            case 12:
              result = _context2.sent;
              this.onDatePicked(result);
              _context2.next = 29;
              break;

            case 16:
              if (!(mode === 'time')) {
                _context2.next = 24;
                break;
              }

              timeMoment = moment_1.default(this.state.date);
              _context2.next = 20;
              return _regenerator.default.awrap(react_native_1.TimePickerAndroid.open({
                hour: timeMoment.hour(),
                minute: timeMoment.minutes(),
                is24Hour: is24Hour,
                mode: androidTimeMode
              }));

            case 20:
              _result = _context2.sent;
              this.onTimePicked(_result);
              _context2.next = 29;
              break;

            case 24:
              if (!(mode === 'datetime')) {
                _context2.next = 29;
                break;
              }

              _context2.next = 27;
              return _regenerator.default.awrap(react_native_1.DatePickerAndroid.open({
                date: this.state.date,
                minDate: minDate ? this.getDate(minDate) : undefined,
                maxDate: maxDate ? this.getDate(maxDate) : undefined,
                mode: androidDatetimeMode
              }));

            case 27:
              _result2 = _context2.sent;
              this.onDatetimePicked(_result2);

            case 29:
              if (typeof this.props.onOpenModal === 'function') {
                this.props.onOpenModal();
              }

            case 30:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_renderIcon",
    value: function _renderIcon() {
      var _this$props8 = this.props,
          showIcon = _this$props8.showIcon,
          iconSource = _this$props8.iconSource,
          iconComponent = _this$props8.iconComponent,
          customStyles = _this$props8.customStyles;

      if (showIcon) {
        if (iconComponent) {
          return iconComponent;
        }

        return React.createElement(react_native_1.Image, {
          style: [style_1.default.dateIcon, customStyles.dateIcon],
          source: iconSource || require('../date_icon.png')
        });
      }

      return null;
    }
  }]);
  return DatePicker;
}(react_1.Component);

DatePicker.defaultProps = {
  mode: Mode.date,
  androidDatetimeMode: AndroidDatetimeMode.default,
  androidTimeMode: AndroidTimeMode.default,
  date: '',
  height: 259,
  duration: 300,
  confirmBtnText: 'Confirm',
  cancelBtnText: 'Cancel',
  iconSource: require('../date_icon.png'),
  customStyles: {
    placeholderText: {},
    dateText: {},
    btnTextConfirm: {},
    btnConfirm: {},
    btnTextCancel: {},
    btnCancel: {},
    datePicker: {},
    dateIcon: {},
    datePickerCon: {},
    dateInput: {},
    disabled: {},
    dateTouchBody: {}
  },
  showIcon: true,
  disabled: false,
  allowFontScaling: true,
  hideText: false,
  placeholder: '',
  TouchableComponent: react_native_1.TouchableHighlight
};
exports.default = DatePicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,